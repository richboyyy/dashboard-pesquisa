import streamlit as st
import pandas as pd
import plotly.express as px
import locale

# --- Configura√ß√µes Iniciais ---

st.set_page_config(
    page_title="Dashboard Ouvidoria ANVISA",
    page_icon="üìä",
    layout="wide"
)

# --- Fun√ß√µes de Carregamento de Dados ---

@st.cache_data
def carregar_dados_pesquisa():
    """
    Carrega e processa os dados da pesquisa de satisfa√ß√£o (pesquisa.csv).
    """
    try:
        df = pd.read_csv("pesquisa.csv", sep=";", encoding='utf-8')
        # Limpa a coluna de satisfa√ß√£o, se ela existir
        coluna_satisfacao = "Voc√™ est√° satisfeito(a) com o atendimento prestado?"
        if coluna_satisfacao in df.columns:
            df[coluna_satisfacao] = df[coluna_satisfacao].str.replace('?? ', '', regex=False).str.strip()
        
        # Processa a coluna de data para o filtro
        opcoes_coluna_data = ['Resposta √† Pesquisa', 'Resposta √† pesquisa']
        coluna_data_encontrada = None
        for coluna in opcoes_coluna_data:
            if coluna in df.columns:
                coluna_data_encontrada = coluna
                break
        if coluna_data_encontrada:
            df[coluna_data_encontrada] = pd.to_datetime(df[coluna_data_encontrada], errors='coerce')
            df.dropna(subset=[coluna_data_encontrada], inplace=True)
            # Usa a mesma coluna 'm√™s' para poder filtrar junto com o outro dataframe
            df["m√™s"] = df[coluna_data_encontrada].dt.to_period('M')
        return df
    except FileNotFoundError:
        st.error("Arquivo 'pesquisa.csv' n√£o encontrado. Verifique se o arquivo est√° no seu reposit√≥rio.")
        return None

@st.cache_data
def carregar_dados_manifestacoes():
    """
    Carrega e processa os dados gerais de manifesta√ß√µes (ListaManifestacoes.xlsx).
    """
    try:
        # ATEN√á√ÉO: Verifique se o nome do arquivo √© .xlsx ou .csv
        df = pd.read_excel("ListaManifestacoes.xlsx")
    except FileNotFoundError:
        st.error("Arquivo 'ListaManifestacoes.xlsx' n√£o encontrado. Verifique se o arquivo est√° no seu reposit√≥rio.")
        return None
    except Exception as e:
        st.error(f"Ocorreu um erro ao ler o arquivo Excel: {e}")
        return None

    # Processa a coluna de data para o filtro
    if 'Data de Abertura' in df.columns:
        df['Data de Abertura'] = pd.to_datetime(df['Data de Abertura'], errors='coerce')
        df.dropna(subset=['Data de Abertura'], inplace=True)
        df["m√™s"] = df['Data de Abertura'].dt.to_period('M')
    else:
        st.warning("Coluna 'Data de Abertura' n√£o encontrada no arquivo de manifesta√ß√µes para o filtro de tempo.")
        df["m√™s"] = None
    
    return df

# --- Carregamento e Filtro Principal ---

df_pesquisa = carregar_dados_pesquisa()
df_manifestacoes = carregar_dados_manifestacoes()

if df_pesquisa is None or df_manifestacoes is None:
    st.stop()

st.sidebar.title("Filtro de Tempo")
st.sidebar.markdown("Use o filtro abaixo para analisar um per√≠odo espec√≠fico.")

# O filtro ser√° baseado nos dados de manifesta√ß√µes
if "m√™s" in df_manifestacoes.columns and not df_manifestacoes["m√™s"].isnull().all():
    # Converte o per√≠odo para uma string formatada para exibi√ß√£o
    df_manifestacoes['m√™s_display'] = df_manifestacoes['m√™s'].dt.strftime('%Y-%m')
    meses_disponiveis = sorted(list(df_manifestacoes["m√™s_display"].dropna().unique()), reverse=True)
    
    meses_selecionados_display = st.sidebar.multiselect(
        "Selecione o(s) m√™s(es):",
        options=meses_disponiveis,
        default=meses_disponiveis
    )
    # Converte a sele√ß√£o de volta para o tipo per√≠odo para filtragem
    meses_selecionados_periodo = pd.to_datetime(meses_selecionados_display).to_period('M')

    # Filtra os dois dataframes
    df_manifestacoes_filtrado = df_manifestacoes[df_manifestacoes["m√™s"].isin(meses_selecionados_periodo)]
    df_pesquisa_filtrado = df_pesquisa[df_pesquisa["m√™s"].isin(meses_selecionados_periodo)]
else:
    st.sidebar.info("Filtro de tempo n√£o dispon√≠vel.")
    df_manifestacoes_filtrado = df_manifestacoes
    df_pesquisa_filtrado = df_pesquisa

# --- Estrutura de Abas ---

st.title("üìä Dashboard Ouvidoria ANVISA")

tab1, tab2 = st.tabs(["An√°lise da Pesquisa de Satisfa√ß√£o", "Painel de Manifesta√ß√µes Gerais"])

# --- Aba 1: An√°lise da Pesquisa de Satisfa√ß√£o (usa df_pesquisa_filtrado) ---
with tab1:
    st.header("An√°lise da Pesquisa de Satisfa√ß√£o")
    # ... (c√≥digo da aba 1 permanece o mesmo, mas usando df_pesquisa_filtrado) ...
    if not df_pesquisa_filtrado.empty:
        # ... (c√≥digo dos gr√°ficos da aba 1) ...
        st.metric("Total de Respostas no Per√≠odo", f"{len(df_pesquisa_filtrado):,}".replace(",", "."))
    else:
        st.info("Nenhum dado de pesquisa encontrado para o per√≠odo selecionado.")


# --- Aba 2: Painel de Manifesta√ß√µes Gerais (usa df_manifestacoes_filtrado) ---
with tab2:
    st.header("Painel de Manifesta√ß√µes Gerais")
    st.markdown("Esta aba apresenta uma vis√£o geral de todas as manifesta√ß√µes recebidas.")

    if not df_manifestacoes_filtrado.empty:
        st.metric("Total de Manifesta√ß√µes no Per√≠odo", f"{len(df_manifestacoes_filtrado):,}".replace(",", "."))
        st.markdown("---")

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("Principais Temas das Manifesta√ß√µes")
            # Usa a coluna 'Assunto' do novo arquivo
            temas = df_manifestacoes_filtrado['Assunto'].value_counts().nlargest(10).reset_index()
            temas.columns = ['Tema', 'Quantidade']
            fig_temas = px.bar(temas, x='Quantidade', y='Tema', orientation='h', text='Quantidade')
            fig_temas.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig_temas, use_container_width=True)

        with col2:
            st.subheader("Tipos de Manifesta√ß√µes Registradas")
            # Usa a coluna 'Tipo' do novo arquivo
            tipos_gerais = df_manifestacoes_filtrado['Tipo'].value_counts().reset_index()
            tipos_gerais.columns = ['Tipo', 'Quantidade']
            fig_tipos_gerais = px.bar(tipos_gerais, x='Quantidade', y='Tipo', orientation='h', text='Quantidade')
            fig_tipos_gerais.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig_tipos_gerais, use_container_width=True)

        col3, col4 = st.columns(2)
        
        with col3:
            st.subheader("Distribui√ß√£o de Manifesta√ß√µes por √Årea")
            # Usa a coluna '√Årea Respons√°vel' do novo arquivo
            area_resp = df_manifestacoes_filtrado["√Årea Respons√°vel"].value_counts().reset_index()
            area_resp.columns = ['√Årea', 'Quantidade']
            fig_area_vertical = px.bar(area_resp, x='√Årea', y='Quantidade', color='√Årea', text_auto=True)
            fig_area_vertical.update_layout(showlegend=False, xaxis_tickangle=-45, xaxis={'categoryorder':'total descending'})
            st.plotly_chart(fig_area_vertical, use_container_width=True)
            
        with col4:
            st.subheader("Situa√ß√£o Atual das Manifesta√ß√µes")
            # Usa a coluna 'Situa√ß√£o' do novo arquivo
            situacao = df_manifestacoes_filtrado['Situa√ß√£o'].value_counts().reset_index()
            situacao.columns = ['Situa√ß√£o', 'Quantidade']
            fig_situacao = px.bar(situacao, x='Quantidade', y='Situa√ß√£o', orientation='h', text='Quantidade')
            fig_situacao.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig_situacao, use_container_width=True)

    else:
        st.info("Nenhuma manifesta√ß√£o encontrada para o per√≠odo selecionado.")
