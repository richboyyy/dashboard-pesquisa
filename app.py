import streamlit as st
import pandas as pd
import plotly.express as px
import locale

# --- Configura√ß√µes Iniciais ---

# Define a configura√ß√£o da p√°gina. Isso deve ser o primeiro comando do Streamlit.
st.set_page_config(
    page_title="Dashboard de Manifesta√ß√µes ANVISA",
    page_icon="üìä",
    layout="wide"
)

# Define o locale para portugu√™s do Brasil para garantir que os nomes dos meses fiquem corretos.
try:
    locale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')
except locale.Error:
    st.warning("Locale 'pt_BR.UTF-8' n√£o encontrado. Os nomes dos meses podem aparecer em ingl√™s.")

# --- Carregamento e Pr√©-processamento dos Dados ---

@st.cache_data
def carregar_dados():
    """
    Carrega os dados do CSV usando a codifica√ß√£o correta (utf-8) e limpa os dados.
    """
    try:
        # Usando 'utf-8' diretamente, pois sabemos que √© a codifica√ß√£o correta.
        df = pd.read_csv("pesquisa.csv", sep=";", encoding='utf-8')
    except FileNotFoundError:
        st.error("Erro: O arquivo 'pesquisa.csv' n√£o foi encontrado. Por favor, certifique-se de que o arquivo est√° no seu reposit√≥rio GitHub junto com o script do app.")
        return None
    except Exception as e:
        st.error(f"Ocorreu um erro ao ler o arquivo CSV. Verifique o formato do arquivo. Erro: {e}")
        return None

    # --- Processamento e Limpeza das Colunas ---

    # ATUALIZA√á√ÉO: Remove o prefixo "?? " da coluna de satisfa√ß√£o.
    # Verifica se a coluna existe antes de tentar modific√°-la.
    coluna_satisfacao = "Voc√™ est√° satisfeito(a) com o atendimento prestado?"
    if coluna_satisfacao in df.columns:
        df[coluna_satisfacao] = df[coluna_satisfacao].str.replace('?? ', '', regex=False).str.strip()

    # L√≥gica para encontrar a coluna de data correta
    opcoes_coluna_data = ['Resposta √† Pesquisa', 'Resposta √† pesquisa']
    coluna_data_encontrada = None

    for coluna in opcoes_coluna_data:
        if coluna in df.columns:
            coluna_data_encontrada = coluna
            break

    if coluna_data_encontrada is None:
        st.error("Erro Cr√≠tico: N√£o foi poss√≠vel encontrar uma coluna de data ('Resposta √† Pesquisa' ou 'Resposta √† pesquisa') no arquivo CSV.")
        st.info("As colunas que foram encontradas no arquivo s√£o:")
        st.code(df.columns.tolist())
        return None

    # Se a coluna foi encontrada, prossegue com o processamento
    try:
        df[coluna_data_encontrada] = pd.to_datetime(df[coluna_data_encontrada], errors='coerce')
        df.dropna(subset=[coluna_data_encontrada], inplace=True)
        df["m√™s"] = df[coluna_data_encontrada].dt.month_name().str.lower()
        return df
    except Exception as e:
        st.error(f"Ocorreu um erro ao processar a coluna de data '{coluna_data_encontrada}': {e}")
        return None


df = carregar_dados()

if df is None:
    st.stop()


# --- Barra Lateral (Sidebar) com Filtros ---

st.sidebar.title("üóìÔ∏è Filtro de Tempo")
st.sidebar.markdown("Use o filtro abaixo para analisar um per√≠odo espec√≠fico.")

meses_disponiveis = sorted(list(df["m√™s"].dropna().unique()))

meses_selecionados = st.sidebar.multiselect(
    "Selecione o(s) m√™s(es):",
    options=meses_disponiveis,
    default=meses_disponiveis
)

# Filtra o DataFrame com base na sele√ß√£o.
if meses_selecionados:
    df_filtrado = df[df["m√™s"].isin(meses_selecionados)]
else:
    st.warning("Por favor, selecione pelo menos um m√™s na barra lateral para visualizar os dados.")
    df_filtrado = pd.DataFrame()

# --- P√°gina Principal ---

st.title("üìä Dashboard de An√°lise de Manifesta√ß√µes da ANVISA")
st.markdown("Este painel apresenta uma an√°lise das respostas da pesquisa de satisfa√ß√£o.")

if not df_filtrado.empty:
    # --- M√©tricas Principais ---
    col1, col2 = st.columns(2)
    col1.metric("Total de Respostas no Per√≠odo", len(df_filtrado))
    col2.metric("Per√≠odo Analisado", f"{len(meses_selecionados)} mese(s)")

    st.markdown("---")

    # --- Gr√°ficos ---

    # Gr√°fico 1 - √Årea Respons√°vel
    st.subheader("Distribui√ß√£o de Manifesta√ß√µes por √Årea")
    area_resp = df_filtrado["√Årea"].value_counts().reset_index()
    area_resp.columns = ['√Årea', 'Quantidade']
    
    # ATUALIZA√á√ÉO: Calcula a altura do gr√°fico dinamicamente
    # Damos 25 pixels para cada barra + 200 pixels para margens e t√≠tulo.
    altura_grafico_area = len(area_resp) * 25 + 200

    fig1 = px.bar(area_resp, x='Quantidade', y='√Årea', orientation='h',
                  color='√Årea',
                  labels={'Quantidade': 'N¬∫ de Manifesta√ß√µes', '√Årea': '√Årea Respons√°vel'},
                  text='Quantidade',
                  height=altura_grafico_area) # Define a altura calculada
    
    # Melhora a visualiza√ß√£o do gr√°fico
    fig1.update_layout(
        showlegend=False,
        yaxis={'categoryorder':'total ascending'} # Ordena as barras da menor para a maior
    )
    st.plotly_chart(fig1, use_container_width=True)

    # Gr√°fico 2 - Tipo de Manifesta√ß√£o
    st.subheader("Classifica√ß√£o por Tipo de Manifesta√ß√£o")
    tipo = df_filtrado["Tipo de Manifesta√ß√£o"].value_counts().reset_index()
    tipo.columns = ['Tipo', 'Quantidade']
    fig2 = px.pie(tipo, values='Quantidade', names='Tipo',
                  title='Propor√ß√£o por Tipo de Manifesta√ß√£o',
                  hole=.3)
    st.plotly_chart(fig2, use_container_width=True)


    # Gr√°fico 3 - Avalia√ß√£o do Atendimento
    st.subheader("Avalia√ß√£o do Atendimento")
    col3, col4 = st.columns(2)

    with col3:
        st.markdown("##### A sua demanda foi atendida?")
        avaliacao = df_filtrado["A sua demanda foi atendida?"].value_counts().reset_index()
        avaliacao.columns = ['Resposta', 'Quantidade']
        fig3 = px.bar(avaliacao, x='Quantidade', y='Resposta', color='Resposta',
                      labels={'Quantidade': 'Contagem', 'Resposta': 'Resposta do Usu√°rio'},
                      text='Quantidade')
        fig3.update_layout(showlegend=False)
        st.plotly_chart(fig3, use_container_width=True)

    with col4:
        st.markdown("##### Satisfa√ß√£o com o atendimento prestado")
        # Os dados j√° foram limpos na fun√ß√£o carregar_dados()
        satisfacao = df_filtrado["Voc√™ est√° satisfeito(a) com o atendimento prestado?"].value_counts().reset_index()
        satisfacao.columns = ['Satisfa√ß√£o', 'Quantidade']
        fig4 = px.bar(satisfacao, x='Quantidade', y='Satisfa√ß√£o', color='Satisfa√ß√£o',
                      labels={'Quantidade': 'Contagem', 'Satisfa√ß√£o': 'N√≠vel de Satisfa√ß√£o'},
                      text_auto=True)
        fig4.update_layout(showlegend=False, yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig4, use_container_width=True)

else:
    st.info("Selecione os meses na barra √† esquerda para come√ßar a an√°lise.")
