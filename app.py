import streamlit as st
import pandas as pd
import plotly.express as px
import locale

# --- Configura√ß√µes Iniciais ---

# Define a configura√ß√£o da p√°gina. Isso deve ser o primeiro comando do Streamlit.
st.set_page_config(
    page_title="Dashboard de Manifesta√ß√µes ANVISA",
    page_icon="üìä",
    layout="wide"
)

# Define o locale para portugu√™s do Brasil para garantir que os nomes dos meses fiquem corretos.
# Isso pode ser necess√°rio dependendo do ambiente onde o app est√° rodando.
try:
    locale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')
except locale.Error:
    st.warning("Locale 'pt_BR.UTF-8' n√£o encontrado. Os nomes dos meses podem aparecer em ingl√™s.")

# --- Carregamento e Pr√©-processamento dos Dados ---

# Usamos um bloco try-except para lidar com o caso de o arquivo n√£o ser encontrado.
@st.cache_data
def carregar_dados():
    try:
        # Carrega os dados do arquivo CSV
        df = pd.read_csv("pesquisa.csv", sep=";", encoding="latin1")
        # Converte a coluna de data, tratando erros ao converter para NaT (Not a Time)
        df["Resposta √† Pesquisa"] = pd.to_datetime(df["Resposta √† Pesquisa"], errors="coerce")
        # Remove linhas onde a data n√£o p√¥de ser convertida
        df.dropna(subset=["Resposta √† Pesquisa"], inplace=True)
        # Extrai o nome do m√™s em min√∫sculas
        df["m√™s"] = df["Resposta √† Pesquisa"].dt.month_name().str.lower()
        return df
    except FileNotFoundError:
        st.error("Erro: O arquivo 'pesquisa.csv' n√£o foi encontrado. Por favor, certifique-se de que o arquivo est√° na mesma pasta que o seu script `app.py`.")
        return None

df = carregar_dados()

if df is None:
    st.stop() # Interrompe a execu√ß√£o do script se o arquivo n√£o for encontrado.


# --- Barra Lateral (Sidebar) com Filtros ---

st.sidebar.title("üóìÔ∏è Filtro de Tempo")
st.sidebar.markdown("Use o filtro abaixo para analisar um per√≠odo espec√≠fico.")

# Obt√©m a lista de meses √∫nicos e a ordena
# Usamos list() para garantir que a ordem seja preservada ap√≥s o sorted()
meses_disponiveis = sorted(list(df["m√™s"].dropna().unique()))

meses_selecionados = st.sidebar.multiselect(
    "Selecione o(s) m√™s(es):",
    options=meses_disponiveis,
    default=meses_disponiveis # Por padr√£o, todos os meses v√™m selecionados
)

# Filtra o DataFrame com base na sele√ß√£o.
if meses_selecionados:
    df_filtrado = df[df["m√™s"].isin(meses_selecionados)]
else:
    # Se nenhum m√™s for selecionado, o ideal √© mostrar uma mensagem em vez de um dashboard vazio
    st.warning("Por favor, selecione pelo menos um m√™s na barra lateral para visualizar os dados.")
    df_filtrado = pd.DataFrame() # Cria um DataFrame vazio para evitar erros nos gr√°ficos

# --- P√°gina Principal ---

st.title("üìä Dashboard de An√°lise de Manifesta√ß√µes da ANVISA")
st.markdown("Este painel apresenta uma an√°lise das respostas da pesquisa de satisfa√ß√£o.")

# Verifica se o dataframe filtrado n√£o est√° vazio antes de tentar renderizar o resto da p√°gina
if not df_filtrado.empty:
    # --- M√©tricas Principais ---
    col1, col2 = st.columns(2)
    col1.metric("Total de Respostas no Per√≠odo", len(df_filtrado))
    # Exemplo de outra m√©trica que voc√™ poderia adicionar
    col2.metric("Per√≠odo Analisado", f"{len(meses_selecionados)} mese(s)")

    st.markdown("---") # Linha divis√≥ria

    # --- Gr√°ficos ---

    # Gr√°fico 1 - √Årea Respons√°vel
    st.subheader("Distribui√ß√£o de Manifesta√ß√µes por √Årea")
    # ATUALIZA√á√ÉO: Usando a coluna "√Årea"
    area_resp = df_filtrado["√Årea"].value_counts().reset_index()
    area_resp.columns = ['√Årea', 'Quantidade']
    fig1 = px.bar(area_resp, x='Quantidade', y='√Årea', orientation='h',
                  color='√Årea',
                  labels={'Quantidade': 'N¬∫ de Manifesta√ß√µes', '√Årea': '√Årea Respons√°vel'},
                  text='Quantidade')
    fig1.update_layout(showlegend=False) # Esconde a legenda para um visual mais limpo
    st.plotly_chart(fig1, use_container_width=True)

    # Gr√°fico 2 - Tipo de Manifesta√ß√£o
    st.subheader("Classifica√ß√£o por Tipo de Manifesta√ß√£o")
    # ATUALIZA√á√ÉO: Usando a coluna "Tipo de Manifesta√ß√£o"
    tipo = df_filtrado["Tipo de Manifesta√ß√£o"].value_counts().reset_index()
    tipo.columns = ['Tipo', 'Quantidade']
    fig2 = px.pie(tipo, values='Quantidade', names='Tipo',
                  title='Propor√ß√£o por Tipo de Manifesta√ß√£o',
                  hole=.3) # Gr√°fico de rosca para variar
    st.plotly_chart(fig2, use_container_width=True)


    # Gr√°fico 3 - Atendimento √† Demanda e Satisfa√ß√£o com Atendimento
    st.subheader("Avalia√ß√£o do Atendimento")
    col3, col4 = st.columns(2)

    with col3:
        # ATUALIZA√á√ÉO: Usando a coluna "A sua demanda foi atendida?"
        st.markdown("##### A sua demanda foi atendida?")
        avaliacao = df_filtrado["A sua demanda foi atendida?"].value_counts().reset_index()
        avaliacao.columns = ['Resposta', 'Quantidade']
        fig3 = px.bar(avaliacao, x='Quantidade', y='Resposta', color='Resposta',
                      labels={'Quantidade': 'Contagem', 'Resposta': 'Resposta do Usu√°rio'},
                      text='Quantidade')
        fig3.update_layout(showlegend=False)
        st.plotly_chart(fig3, use_container_width=True)

    with col4:
        # ATUALIZA√á√ÉO: Usando a coluna "Voc√™ est√° satisfeito(a) com o atendimento prestado?"
        st.markdown("##### Satisfa√ß√£o com o atendimento prestado")
        satisfacao = df_filtrado["Voc√™ est√° satisfeito(a) com o atendimento prestado?"].value_counts().reset_index()
        satisfacao.columns = ['Satisfa√ß√£o', 'Quantidade']
        fig4 = px.bar(satisfacao, x='Quantidade', y='Satisfa√ß√£o', color='Satisfa√ß√£o',
                      labels={'Quantidade': 'Contagem', 'Satisfa√ß√£o': 'N√≠vel de Satisfa√ß√£o'},
                      text_auto=True)
        fig4.update_layout(showlegend=False)
        st.plotly_chart(fig4, use_container_width=True)

else:
    # Se o dataframe estiver vazio (nenhum m√™s selecionado), a mensagem de aviso j√° foi exibida.
    st.info("Selecione os meses na barra √† esquerda para come√ßar a an√°lise.")
